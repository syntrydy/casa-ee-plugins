package org.gluu.casa.plugins.consent.ldap;

import com.unboundid.ldap.sdk.DN;
import com.unboundid.ldap.sdk.ReadOnlyEntry;
import com.unboundid.ldap.sdk.persist.FilterUsage;
import com.unboundid.ldap.sdk.persist.LDAPEntryField;
import com.unboundid.ldap.sdk.persist.LDAPField;
import com.unboundid.ldap.sdk.persist.LDAPObject;
import org.gluu.casa.misc.Utils;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Optional;

/**
 * This class provides an implementation of an object that can be used to
 * represent oxAuthClient objects in the directory.
 * It was generated by the generate-source-from-schema tool provided with the
 * UnboundID LDAP SDK for Java.  It may be customized as desired to better suit
 * your needs.
 */
@LDAPObject(structuralClass="oxAuthClient",
        superiorClass="top")
public class Client {

    // The field to use to hold a read-only copy of the associated entry.
    @LDAPEntryField
    private ReadOnlyEntry ldapEntry;

    // The field used for RDN attribute inum.
    @LDAPField(inRDN=true,
            filterUsage= FilterUsage.ALWAYS_ALLOWED,
            requiredForEncode=true)
    private String[] inum;

    // The field used for optional attribute associatedPerson.
    @LDAPField
    private DN[] associatedPerson;

    // The field used for optional attribute displayName.
    @LDAPField
    private String displayName;

    // The field used for optional attribute oxAuthClientURI.
    @LDAPField
    private String[] oxAuthClientURI;
    // The field used for optional attribute oxAuthContact.

    @LDAPField
    private String[] oxAuthContact;
    // The field used for optional attribute oxAuthLogoURI.

    @LDAPField
    private String[] oxAuthLogoURI;

    // The field used for optional attribute oxAuthPolicyURI.
    @LDAPField
    private String[] oxAuthPolicyURI;
    // The field used for optional attribute oxAuthTosURI.

    @LDAPField
    private String[] oxAuthTosURI;

    /**
     * Retrieves the first value for the field associated with the
     * inum attribute, if present.
     *
     * @return  The first value for the field associated with the
     *          inum attribute, or
     *          {@code null} if that attribute was not present in the entry or
     *          does not have any values.
     */
    public String getInum()
    {
        if ((inum == null) ||
                (inum.length == 0))
        {
            return null;
        }
        else
        {
            return inum[0];
        }
    }

    public List<DN> getAssociatedPersonAsList() {

        if (Utils.isEmpty(associatedPerson)) {
            return Collections.emptyList();
        } else {
            return Arrays.asList(associatedPerson);
        }

    }

    /**
     * Retrieves the value for the field associated with the
     * displayName attribute, if present.
     *
     * @return  The value for the field associated with the
     *          displayName attribute, or
     *          {@code null} if the field does not have a value.
     */
    public String getDisplayName()
    {
        return displayName;
    }

    /**
     * Retrieves the first value for the field associated with the
     * oxAuthClientURI attribute, if present.
     *
     * @return  The first value for the field associated with the
     *          oxAuthClientURI attribute, or
     *          {@code null} if that attribute was not present in the entry or
     *          does not have any values.
     */
    public String getOxAuthClientURI()
    {
        if ((oxAuthClientURI == null) ||
                (oxAuthClientURI.length == 0))
        {
            return null;
        }
        else
        {
            return oxAuthClientURI[0];
        }
    }

    public List<String> getOxAuthContactAsList() {

        if (Utils.isEmpty(oxAuthContact)) {
            return Collections.emptyList();
        } else {
            return Arrays.asList(oxAuthContact);
        }

    }

    /**
     * Retrieves the first value for the field associated with the
     * oxAuthLogoURI attribute, if present.
     *
     * @return  The first value for the field associated with the
     *          oxAuthLogoURI attribute, or
     *          {@code null} if that attribute was not present in the entry or
     *          does not have any values.
     */
    public String getOxAuthLogoURI()
    {
        if ((oxAuthLogoURI == null) ||
                (oxAuthLogoURI.length == 0))
        {
            return null;
        }
        else
        {
            return oxAuthLogoURI[0];
        }
    }

    /**
     * Retrieves the first value for the field associated with the
     * oxAuthPolicyURI attribute, if present.
     *
     * @return  The first value for the field associated with the
     *          oxAuthPolicyURI attribute, or
     *          {@code null} if that attribute was not present in the entry or
     *          does not have any values.
     */
    public String getOxAuthPolicyURI()
    {
        if ((oxAuthPolicyURI == null) ||
                (oxAuthPolicyURI.length == 0))
        {
            return null;
        }
        else
        {
            return oxAuthPolicyURI[0];
        }
    }

    /**
     * Retrieves the first value for the field associated with the
     * oxAuthTosURI attribute, if present.
     *
     * @return  The first value for the field associated with the
     *          oxAuthTosURI attribute, or
     *          {@code null} if that attribute was not present in the entry or
     *          does not have any values.
     */
    public String getOxAuthTosURI()
    {
        if ((oxAuthTosURI == null) ||
                (oxAuthTosURI.length == 0))
        {
            return null;
        }
        else
        {
            return oxAuthTosURI[0];
        }
    }

    /**
     * Constructs an ID based on inum value, dropping all non alphabetic chars
     * @return A string
     */
    public String getAlternativeID() {
        return Optional.ofNullable(getInum())
                .map(str -> str.replaceAll("\\W","")).orElse (null);
    }

}
